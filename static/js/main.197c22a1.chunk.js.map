{"version":3,"sources":["profil-foto.jpg","serviceWorker.ts","Home.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Home","props","state","ilkSayi","ikinciSayi","sonuc","topla","bind","cikar","carp","bol","BirinciSayiDegisti","IkinciSayiDegisti","temizle","this","setState","event","parseInt","target","value","className","src","require","id","type","onChange","onClick","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4LAAAA,EAAOC,QAAU,IAA0B,yC,mFCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCiESC,G,kBAlEb,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KACDC,MAAM,CAACC,QAAQF,EAAME,QAAQC,WAAWH,EAAMG,WAAWC,MAAMJ,EAAMI,OAC1E,EAAKC,MAAM,EAAKA,MAAMC,KAAX,gBACX,EAAKC,MAAM,EAAKA,MAAMD,KAAX,gBACX,EAAKE,KAAK,EAAKA,KAAKF,KAAV,gBACV,EAAKG,IAAI,EAAKA,IAAIH,KAAT,gBACT,EAAKI,mBAAmB,EAAKA,mBAAmBJ,KAAxB,gBACxB,EAAKK,kBAAkB,EAAKA,kBAAkBL,KAAvB,gBACvB,EAAKM,QAAQ,EAAKA,QAAQN,KAAb,gBATW,E,qEAYxBO,KAAKC,SAAS,CAACV,MAAMS,KAAKZ,MAAMC,QAAQW,KAAKZ,MAAME,e,8BAGnDU,KAAKC,SAAS,CAACV,MAAMS,KAAKZ,MAAMC,QAAQW,KAAKZ,MAAME,e,6BAGnDU,KAAKC,SAAS,CAACV,MAAMS,KAAKZ,MAAMC,QAAQW,KAAKZ,MAAME,e,4BAGnDU,KAAKC,SAAS,CAACV,MAAMS,KAAKZ,MAAMC,QAAQW,KAAKZ,MAAME,e,yCAElCY,GAEjBF,KAAKC,SAAS,CAACZ,QAAQc,SAASD,EAAME,OAAOC,W,wCAE7BH,GAEhBF,KAAKC,SAAS,CAACX,WAAWa,SAASD,EAAME,OAAOC,W,gCAIhDL,KAAKC,SAAS,CAACZ,QAAQ,EAAEC,WAAW,EAAEC,MAAM,M,+BAK9C,OACE,oCACA,yBAAKe,UAAU,aACb,yBAAKA,UAAU,OACb,2BAAOA,UAAU,mBACf,yBAAKA,UAAU,kBACf,yBAAKC,IAAKC,EAAQ,IAAsBF,UAAU,WAGpD,yBAAKA,UAAU,mBACb,0DACE,2BAAOG,GAAG,cAAcC,KAAK,OAAOC,SAAUX,KAAKH,mBAAoBQ,MAAOL,KAAKZ,MAAMC,UAC3F,0DACE,2BAAOoB,GAAG,aAAaC,KAAK,OAAOC,SAAUX,KAAKF,kBAAmBO,MAAOL,KAAKZ,MAAME,aACzF,4BAAQsB,QAASZ,KAAKR,OAAtB,SACA,4BAAQoB,QAASZ,KAAKN,OAAtB,iBACA,4BAAQkB,QAASZ,KAAKL,MAAtB,WACA,4BAAQiB,QAASZ,KAAKJ,KAAtB,UACA,4BAAQgB,QAASZ,KAAKD,SAAtB,WACA,oCAAUC,KAAKZ,MAAMG,e,GA1DZsB,IAAMC,YCTzBC,IAASC,OAAO,kBAAC,EAAD,CAAM3B,QAAS,EAAGC,WAAY,EAAGC,MAAO,IAAO0B,SAASC,eAAe,SFoIjF,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.197c22a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profil-foto.f5823f74.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport './Home.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\ninterface myProps{\n  ilkSayi:number;\n  ikinciSayi:number;\n  sonuc:number;\n}\n\ninterface myState{\n  ilkSayi:number;\n  ikinciSayi:number;\n  sonuc:number;\n}\n\nclass Home extends React.Component<myProps,myState>{\n  constructor(props:myProps){\n    super(props);\n    this.state={ilkSayi:props.ilkSayi,ikinciSayi:props.ikinciSayi,sonuc:props.sonuc};\n    this.topla=this.topla.bind(this);\n    this.cikar=this.cikar.bind(this);\n    this.carp=this.carp.bind(this);\n    this.bol=this.bol.bind(this);\n    this.BirinciSayiDegisti=this.BirinciSayiDegisti.bind(this);\n    this.IkinciSayiDegisti=this.IkinciSayiDegisti.bind(this);\n    this.temizle=this.temizle.bind(this);\n  }\n  topla(){\n    this.setState({sonuc:this.state.ilkSayi+this.state.ikinciSayi});\n  }\n  cikar(){\n    this.setState({sonuc:this.state.ilkSayi-this.state.ikinciSayi});\n  }\n  carp(){\n    this.setState({sonuc:this.state.ilkSayi*this.state.ikinciSayi});\n  }\n  bol(){\n    this.setState({sonuc:this.state.ilkSayi/this.state.ikinciSayi});\n  }\n  BirinciSayiDegisti(event: { target: { value: any; }; })\n  {\n    this.setState({ilkSayi:parseInt(event.target.value)});\n  }\n  IkinciSayiDegisti(event: { target: { value: any; }; })\n  {\n    this.setState({ikinciSayi:parseInt(event.target.value)});\n  }\n  temizle()\n  {\n    this.setState({ilkSayi:0,ikinciSayi:0,sonuc:0});\n  }\n  \n  render()\n  {\n  return (\n    <>\n    <div className=\"container\">\n      <div className=\"row\">\n        <aside className=\"col-4 sol-taraf\">\n          <div className=\"foto-container\">\n          <img src={require(\"./profil-foto.jpg\")} className=\"foto\"></img>\n          </div>\n        </aside>\n        <div className=\"col-8 sag-taraf\">\n          <p>1.Sayıyı Giriniz:</p>\n            <input id=\"birinciSayi\" type=\"text\" onChange={this.BirinciSayiDegisti} value={this.state.ilkSayi}></input>\n          <p>2.Sayıyı Giriniz:</p>\n            <input id=\"ikinciSayi\" type=\"text\" onChange={this.IkinciSayiDegisti} value={this.state.ikinciSayi}></input>\n          <button onClick={this.topla}>Topla</button>\n          <button onClick={this.cikar}>Çıkar</button>\n          <button onClick={this.carp}>Çarp</button>\n          <button onClick={this.bol}>Böl</button>\n          <button onClick={this.temizle}>Temizle</button>\n          <p>Sonuc:{this.state.sonuc}</p>\n        </div>\n        </div>\n      </div>\n      </>\n  );\n}\n}\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home';\n\nReactDOM.render(<Home ilkSayi={0} ikinciSayi={0} sonuc={0} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}